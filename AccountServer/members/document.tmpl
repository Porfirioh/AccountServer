<head>
	<script>
		$(function() {
			var formOptions = {{Form.Options}};
			var record = '!{{Record}}';
			var fixedAmount = matchingStatement();
			if(fixedAmount) {
				record.Allocated = 0;
				record.Remaining = record.DocumentAmount;
				formOptions.header.columns.splice(5, 0, {
							data: 'Allocated',
							type: 'decimalField',
							sameRow: true
						},
						{
							data: 'Remaining',
							type: 'decimalField',
							sameRow: true
						});
				formOptions.validate = function() {
					if(fixedAmount && form.data.header.Remaining != 0) {
						return 'Total does not equal the payment';
					}
				};
			}
			formOptions.data = record;
			formOptions.detail.deleteRows = function(data) {
				if($(this).index() == form.detail.data.length - 1)
					return false;
				if((data.Amount != 0)
						&& !confirm('Amount is not zero - are you sure?'))
					return false;
				if(fixedAmount) {
					form.header.data.Allocated -= data.Amount;
					form.header.data.Remaining = form.header.data.DocumentAmount -  form.header.data.Allocated;
				} else
					form.header.data.DocumentAmount -= data.Amount;
				form.header.draw();
			};
			var emptyRow = {
				'@class': 'noDeleteButton',
				NameAddressId: 0,
				Member: '',
				Amount: 0.00
			};
			record.detail.push(_.clone(emptyRow));
			var form = makeHeaderDetailForm('#docs', '#detail',
					formOptions
			);
			function checkForNewRow() {
				if(form.detail.data[form.detail.data.length - 1].NameAddressId) {
					form.detail.find('tbody tr.noDeleteButton').removeClass('noDeleteButton');
					form.detail.addRow(_.clone(emptyRow));
					return true;
				}
			}
			checkForNewRow();
			form.detail.bind('changed.field', function(e, newValue, rowData, col, input) {
				//noinspection FallThroughInSwitchStatementJS
				switch(col.name) {
					case 'Member':
						if(newValue == rowData.Member)
							return;
						var member = _.find(form.detail.fields.Member.selectOptions, function(v) { return v.value == newValue});
						if(member && member.id) {
							rowData.NameAddressId = member.id;
							rowData.Amount = member.PaymentAmount;
						} else {
							rowData.NameAddressId = 0;
						}
						break;
					case 'Amount':
						if(newValue == rowData.Amount)
							return;
						if(fixedAmount) {
							form.header.Allocated += newValue - rowData.Amount;
							form.header.Remaining = form.header.DocumentAmount -  form.header.Allocated;
						} else
							form.header.DocumentAmount += newValue - rowData.Amount;
						form.header.draw();
						rowData.Amount = newValue;
						break;
					default:
						setTimeout(checkForNewRow, 10);	// Wait for data to be updated after we return
						return;
				}
				form.detail.drawRow(input);
				var tot = _.reduce(form.detail.data, function(memo, d) { return memo + d.Amount; }, 0);
				if(tot != form.header.data.DocumentAmount) {
					form.header.data.DocumentAmount = tot;
					form.header.draw();
				}
				checkForNewRow();
			});
			if(fixedAmount) {
				form.header.find('#r0cDocumentAccountId').prop('disabled', true);
			}
		});
	</script>
</head>
<body>
<table id="docs" cellspacing="0" width="100%"></table>
<table id="detail" cellspacing="0" width="100%"></table>
</body>
