<head>{{#with Record}}
	<script>
		function buttonMenu(caption, opts) {
			var input = addButton(caption);
			var id = input[0].id;
			input.click(function() {
				var menu = $('ul.menu');
				if (menu.length) {
					menu.remove();
					if (menu[0].id == 'menu_' + id)
						return;
				}
				if(opts.length == 1) {
					goto(opts[0].href);
					return;
				}
				menu = $('<ul id="menu_' + id + '" class="menu">' + _.map(opts, function (opt) {
							return '<li id="' + opt.text.replace(/ /g, '') + '" data-goto="' + opt.href + '">' + opt.text + '</li>';
						}).join("\r\n") + '</ul>');
				var p = $(input).offset();
				menu.css('left', p.left + 'px').css('top', (p.top + $(input).height() + 5) + 'px');
				menu.appendTo(body);
				var mnu = menu.menu({
					select: function (e, ui) {
						goto(ui.item.attr('data-goto'));
						menu.remove();
					}
				});
			});
		}
		$(function() {
			var record = '!{{Record}}';
			var today = new Date().toYMD() + "T00:00:00Z";
			var form = makeForm('#form', {
				data: record,
				table: 'Account',
				dialog: record.idAccount > 0,
				// canDelete: record.Transactions == 0,
				readonly: '!{{ReadOnly}}',
				validate: function() {
					if(!form.data.AccountName)
						return "The account must have a name";
					if(!form.data.AccountTypeId)
						return "You must choose the type of account";
				},
				columns: [
					{
						data: 'AccountName',
						type: 'textInput'
					},
					{
						data: 'AccountTypeId',
						type: 'selectInput',
						selectOptions: [
							{ id: AcctType.Bank, value: 'Bank'},
							{ id: AcctType.CreditCard, value: 'Credit Card'}
						],
						sameRow: true
					},
					{
						data: 'AccountCode',
						type: 'textInput'
					},
					{
						data: 'AccountDescription',
						type: 'textInput'
					},
					{
						data: 'NextChequeNumber',
						heading: 'Next Cheque',
						type: 'intInput'
					},
					{
						data: 'NextDepositNumber',
						heading: 'Deposit',
						type: 'intInput',
						sameRow: true
					},
					{
						data: 'StatementFormat',
						type: 'textAreaInput'
					},
					{
						data: 'HideAccount',
						type: 'checkboxInput',
						sameRow: true
					}
				]
			});
			if(form.data.idAccount)
				form.find('select').prop('disabled', true);
			if(record.idAccount) {
				var table = makeDataTable('#docs', {
					table: 'Document',
					select: function (row) {
						return openDocument(row, form.data.idAccount);
					},
					columns: [
						'/DocumentDate',
						'DocumentIdentifier/Id',
						'DocType/Type',
						'DocumentName',
						'DocumentMemo',
						'DocumentAccountName',
						'Clr',
						{
							data: 'DocumentAmount',
							heading: 'Payment',
							type: 'credit'
						},
						{
							data: 'DocumentAmount',
							heading: 'Deposit',
							type: 'debit'
						},
						{
							data: 'Balance',
							type: 'bracket'
						}
					],
					rowCallback: function (row, data) {
						if (data.DocumentDate > today) {
							$(row).addClass('future');
						}
					}
				});
				//{{#if ReadWrite}}
				addButton('Import statement', 'statementimport.html?id=' + record.idAccount);
				buttonMenu('Pay Out', record.minus);
				buttonMenu('Pay In', record.plus);
				addButton('Reconcile', 'reconcile.html?id=' + record.idAccount);
				//{{/if}}
				actionButton('Audit').click(function () {
					goto('/reports/audithistory.html?id=' + record.idAccount + '&table=Accounts');
				});
			}
		});
	</script>
	{{/with}}
</head>
<body>
<table><tr><th>Balance</th><td>{{Record.Balance:0.00}}</td><th>Current balance</th><td>{{Record.CurrentBalance:0.00}}</td></tr></table>
<table id="form" width="100%"></table>
<table id="docs" cellspacing="0" width="100%"></table>
</body>
