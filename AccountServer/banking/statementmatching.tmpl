<head>{{#with Record}}
	<style>
		#import tr.warning input {
			display: none;
		}
		#docs tr.nosame input[data-col=Same] {
			display: none;
		}
	</style>
	<script>
		$(function() {
			var record = '!{{Record}}';
			var submitUrl = defaultUrl('Save');
			var current = {};
			var id = getParameter('id');
			function zeroRanks() {
				_.each(record.transactions, function(t) {
					t.Rank = 0;
				});
			}
			zeroRanks();
			var imp = makeListForm('#import', {
				data: record.import,
				select: function(row) {
					if(!row.Date)
						return false;
					imp.find('tr').removeClass('current');
					$(this).closest('tr').addClass('current');
					current = row;
					var words = _.filter(current.Name.toUpperCase().split(' '), function(n) { return n; });
					_.each(record.transactions, function(t) {
						var rank = 0;
						_.each(words, function(w) {
							if(t.DocumentName.toUpperCase().indexOf(w) >= 0
								|| t.DocumentMemo.toUpperCase().indexOf(w) >= 0)
								rank++;
							if(t.DocumentAmount == current.Amount)
								rank += 10 * words.length;
							var d = Math.abs(Date.parse(t.DocumentDate) - Date.parse(current.Date)) / 86400000;
							if(d <= 7 && !t.Matched)
								rank += words.length * (8 - d) / 8;
							t.Rank = Math.round(10 * rank / words.length);
						});
					});
					docs.api().order([docs.fields['Rank'].index, 'desc']);
					docs.dataReady(record.transactions);
				},
				columns: [
					'/Date',
					'Id/Id',
					'Name',
					'Memo',
					{
						data: 'Amount',
						heading: 'Payment',
						type: 'credit'
					},
					{
						data: 'Amount',
						heading: 'Deposit',
						type: 'debit'
					},
					{
						data: 'New',
						hint: 'Create a new transaction',
						type: 'checkboxInput'
					}
				]
			});
			var docs = makeDataTable('#docs', {
				table: 'Document',
				data: {},
				iDisplayLength: 10,
				select: function (row) {
					return openDocument(row, id);
				},
				rowCallback: function (row, data) {
					if (!data.Matched && data.DocumentAmount == current.Amount) {
							if(Math.abs(Date.parse(data.DocumentDate) - Date.parse(current.Date)) <= 604800000) {
								$(row).addClass('matches');
							}
						$(row).removeClass('nosame');
						//$(row).find('input[data-col=Same]').show();
					} else {
						$(row).addClass('nosame');
						//$(row).find('input[data-col=Same]').hide();
					}
				},
				columns: [
					'/DocumentDate',
					'DocumentIdentifier/Id',
					'DocType/Type',
					'DocumentName',
					'DocumentMemo',
					'DocumentAccountName/Account',
					'Clr/C',
					{
						data: 'DocumentAmount',
						type: 'amount'
					},
					{
						data: 'Same',
						hint: 'This is the same transaction',
						type: 'checkboxInput'
					},
					{
						data: 'New',
						hint: 'Create a new transaction like this one',
						type: 'checkboxInput'
					},
					{
						data: 'Rank',
						type: 'int',
						visible: false,
						searchable: false
					}
				]
			});
			$.fn.dataTable.ext.search.push(
					function(settings, dataArray, dataIndex, data) {
						if(current.Amount < 0)
							return data.DocumentAmount < 0;
						else if(current.Amount > 0)
							return data.DocumentAmount > 0;
						else
							return true;
					}
			);
			docs.bind('changed.field', function(e, newValue, rowData, col, input) {
				switch(col.name) {
					case 'New':
					case 'Same':
						$(input).prop('checked', false);
						postJson('statementmatchingsave.html', {
							id: id,
							type: col.name,
							current: _.indexOf(record.import, current),
							transaction: _.indexOf(record.transactions, rowData)
						});
						break;
				}
				return false;
			});
			imp.bind('changed.field', function(e, newValue, rowData, col, input) {
				switch(col.name) {
					case 'New':
						$(input).prop('checked', false);
						current = rowData;
						var currentIndex = _.indexOf(record.import, current);
						var menu = $('ul.menu');
						if(menu.length)	{
							menu.remove();
							if (menu[0].id == 'menu_' + currentIndex)
								return false;
						}
						var opts = rowData.Amount < 0 ? record.minus : record.plus;
						menu = $('<ul class="menu" id="menu_' + currentIndex + '">' + _.map(opts, function(opt) {
									return '<li id="' + opt.text.replace(/ /g, '') + '">' + opt.text + '</li>';
								}).join("\r\n") + '</ul>');
						var p = $(input).offset();
						menu.css('left', (p.left - 100) + 'px').css('top', (p.top + $(input).height()) + 'px');
						menu.appendTo(body);
						var mnu = menu.menu({
							select: function (e, ui) {
								postJson('statementmatchingsave.html', {
									id: id,
									type: ui.item[0].id,
									current: currentIndex,
									transaction: -1
								});
								menu.remove();
							}
						});
				}
				return false;
			});
			$('button#Back').off('click').click(function() {
				window.location = '/banking/detail?id=' + id;
			});
		});
	</script>
	{{/with}}
</head>
<body>
<table id="import" width="100%"></table>
<table id="docs" width="100%"></table>
</body>
