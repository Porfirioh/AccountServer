<!DOCTYPE html>












<head>
{{#with Record}}
	<script>
$(function() {
	var record = '!{{Record}}';
	var products = record.Products;
	var productsHash = hashFromArray(products);
	var vatCodes = record.VatCodes;
	var vatCodesHash = hashFromArray(vatCodes);
	var customers = record.Names;
	var emptyRow = {
		'@class': 'noDeleteButton',
		Qty: 1,
		ProductId: 0,
		Memo: '',
		UnitPrice: 0.00,
		VatCodeId: null,
		VatRate: 0.00,
		VatAmount: 0.00,
		LineAmount: 0.00,
		Account: 0
	};
	var readonly = record.header.DocumentOutstanding != record.header.DocumentAmount;
	record.header.Net = record.header.Vat = 0;
	_.each(record.detail, function(line) {
		record.header.Net += line.LineAmount;
		record.header.Vat += line.VatAmount;
		if(line.Qty && line.LineAmount)
			line.UnitPrice = round(line.LineAmount / line.Qty);
	});
	record.header.Net = round(record.header.Net);
	record.header.Vat = round(record.header.Vat);
	record.detail.push(_.clone(emptyRow));
	var form = makeHeaderDetailForm('#form', '#docs', {
		validate: function() {
			for(var i = 0; i < form.data.detail.length - 1; i++) {
				var row = form.data.detail[i];
				if(!row.ProductId)
					return "Line " + (i + 1) + " must have a product";
			}
		},
		data: record,
		header: {
			table: 'Document',
			canDelete: !readonly && record.header.idDocument,
			readonly: '!{{ReadOnly}}',
			saveAndNew: true,
			columns: [
				{
					data: 'DocumentName',
					heading: 'Customer',
					type: 'autoComplete',
					selectOptions: customers,
					confirmAdd: true
				},
				{
					data: 'DocumentAddress',
					type: 'textAreaInput',
					colspan: 5
				},
				'Telephone',
				{
					data: 'Net',
					type: 'decimalField'
				},
				{
					sameRow: true,
					data: 'Vat',
					type: 'decimalField'
				},
				{
					sameRow: true,
					data: 'DocumentAmount',
					heading: 'Total',
					type: 'decimalField'
				},
				{
					data: 'DocumentDate',
					type: 'dateInput'
				},
				{
					data: 'DocumentIdentifier',
					heading: 'Invoice No',
					type: 'docIdInput'
				},
				{
					data: 'DocumentMemo',
					type: 'textAreaInput'
				}
			]
		},
		detail: {
			table: 'Line',
			select: null,
			deleteRows: function(data) {
				if($(this).index() == record.detail.length - 1)
					return false;
				if((data.LineAmount != 0 || data.VatAmount != 0)
						&& !confirm('Amounts are not zero - are you sure?'))
					return false;
				data.Qty = 0;
				data.UnitPrice = 0;
				data.VatRate = 0;
				calculateLine(data);
			},
			columns: [
				{
					data: 'ProductId',
					type: 'selectInput',
					selectOptions: products
				},
				{
					data: 'Qty',
					type: 'doubleInput'
				},
				{
					data: 'Unit',
					type: 'select',
					selectOptions: unitDisplay
				},
				{
					data: 'Memo',
					type: 'textInput',
					attributes: 'size="50"'
				},
				{
					data: 'UnitPrice',
					type: 'decimalInput'
				},
				{
					data: 'VatCodeId',
					type: 'selectInput',
					selectOptions: vatCodes
				},
				{
					data: 'VatAmount',
					heading: 'Vat',
					type: 'decimalField'
				},
				{
					data: 'LineAmount',
					type: 'decimalField'
				}
			]
		}
	});
	function calculateLine(line) {
		var originalNet = line.LineAmount;
		var originalVat = line.VatAmount;
		line.LineAmount = round((line.Qty || 1) * line.UnitPrice);
		line.VatAmount = round(line.LineAmount * line.VatRate / 100);
		form.data.header.Net = round(form.data.header.Net + line.LineAmount - originalNet);
		form.data.header.Vat = round(form.data.header.Vat + line.VatAmount - originalVat);
		form.data.header.DocumentAmount = round(form.data.header.Net + form.data.header.Vat);
		form.header.draw();
	}
	function checkForNewRow() {
		if(form.data.detail[form.data.detail.length - 1].ProductId) {
			form.detail.find('tbody tr.noDeleteButton').removeClass('noDeleteButton');
			form.detail.addRow(_.clone(emptyRow));
			return true;
		}
	}
	if(readonly)
		form.header.fields.DocumentName.cell.find(':input').prop('disabled', true);
	checkForNewRow();
	form.header.bind('changed.field', function(e, newValue, rowData, col, input) {
		if(col.name == 'DocumentName') {
			var customer = _.find(customers, function(v) { return v.value == newValue});
			if(customer && customer.id) {
				rowData.DocumentName = customer.value;
				rowData.DocumentNameAddressId = customer.id;
				rowData.DocumentAddress = customer.Address;
				rowData.Telephone = customer.Telephone;
				form.header.draw();
			} else {
				rowData.DocumentNameAddressId = 0;
			}
		}
	});
	form.detail.bind('changed.field', function(e, newValue, rowData, col, input) {
		//noinspection FallThroughInSwitchStatementJS
		switch(col.name) {
			case 'ProductId':
				var product = productsHash[newValue] || { VatCodeId: 0, AccountId: 0, Unit: 0 };
				rowData.ProductId = newValue;
				if(product.ProductDescription)
					rowData.Memo = product.ProductDescription;
				if(product.UnitPrice)
					rowData.UnitPrice = product.UnitPrice;
				rowData.Unit = product.Unit;
				rowData.AccountId = product.AccountId;
				newValue = product.VatCodeId;
				// drop through
			case 'VatCodeId':
				var vatCode = vatCodesHash[newValue] || { Rate: 0.00 };
				rowData.VatCodeId = newValue;
				rowData.VatRate = vatCode.Rate;
				break;
			case 'Qty':
				rowData.Qty = newValue;
				break;
			case 'UnitPrice':
				rowData.UnitPrice = newValue;
				break;
			default:
				setTimeout(checkForNewRow, 10);	// Wait for data to be updated after we return
				return;
		}
		calculateLine(rowData);
		form.detail.drawRow(input);
		checkForNewRow();
	});
	if(record.header.idDocument) {
		if(readonly)
			actionButton('Payment history').click(function() {
				goto('/customer/paymenthistory.html?id=' + record.header.idDocument);
			});
		actionButton('Audit').click(function() {
			goto('/reports/audithistory.html?id=' + record.header.idDocument + '&table=Transactions');
		});
		actionButton('Print').click(function() {
			if(unsavedInput) {
				message('You must save the changes first');
				return;
			}
			window.open('/customer/print.html?id=' + record.header.idDocument, 'print');
		});
		actionButton('Print to file').click(function() {
			if(unsavedInput) {
				message('You must save the changes first');
				return;
			}
			window.open('/customer/download.html?id=' + record.header.idDocument, 'print');
		});
		if(!form.header.readonly) {
			actionButton('Email').click(function() {
				if(unsavedInput) {
					message('You must save the changes first');
					return;
				}
				postJson('/customer/email.html?id=' + record.header.idDocument);
			});
		}
	}
});
	</script>
{{/with}}
</head>
<body>
	<table id="form"></table>
	<table id="docs"></table>
</body>
