<!DOCTYPE html>














<head>
{{#with Record}}
	<script>
$(function() {
	var record = loadRecord();
	var names = record.Names;
	var emptyRow = {
		'@class': 'noDeleteButton',
		AccountId: 0,	// Cannot be null, as Journal requires an AccountId
		Memo: '',
		Amount: 0.00,
		Name: record.header.DocumentName
	};
	var readonly = record.header.DocumentOutstanding != record.header.DocumentAmount;
	var dataEntered = readonly || record.detail.length > 0;
	function calculateDocument() {
		record.header.AmountToBalance = 0;
		_.each(record.detail, function (line) {
			record.header.AmountToBalance -= line.Amount;
		});
		var lastRow = record.detail[record.detail.length - 1];
		if(lastRow && !lastRow.AccountId)
			record.header.AmountToBalance += lastRow.Amount;
		record.header.AmountToBalance = round(record.header.AmountToBalance);
		if(lastRow && !lastRow.AccountId)
			lastRow.Amount = record.header.AmountToBalance;
	}
	calculateDocument();
	record.detail.push(_.clone(emptyRow));
	var form = makeHeaderDetailForm('#form', '#docs', {
		validate: function() {
			if(record.header.AmountToBalance != 0)
				return "Journal does not balance";
			for(var i = 0; i < form.data.detail.length - 1; i++) {
				var row = form.data.detail[i];
				if(!row.AccountId)
					return "Line " + (i + 1) + " must have an account";
			}
		},
		data: record,
		header: {
			table: 'Document',
			canDelete: !readonly && record.header.idDocument,
			columns: [
				{
					data: 'DocumentDate',
					type: 'dateInput'
				},
				{
					data: 'DocumentIdentifier',
					heading: 'Journal No',
					type: 'docIdInput'
				},
				{
					data: 'AmountToBalance',
					type: 'decimalField'
				},
				{
					data: 'DocumentMemo',
					type: 'textInput',
					attributes: 'size="50"'
				}
			]
		},
		detail: {
			table: 'Journal',
			deleteRows: function(data) {
				if($(this).index() == record.detail.length - 1)
					return false;
				if(data.Amount != 0
						&& !confirm('Amount is not zero - are you sure?'))
					return false;
				return function() {
					calculateDocument();
					checkForNewRow();
					form.header.draw();
					form.detail.draw();
				};
			},
			columns: [
				{
					data: 'Name',
					type: 'autoComplete',
					selectOptions: names,
					confirmAdd: true
				},
				{
					data: 'AccountId',
					type: 'selectInput',
					selectOptions: record.Accounts
				},
				{
					data: 'Amount',
					type: 'debitInput'
				},
				{
					data: 'Amount',
					type: 'creditInput'
				},
				{
					data: 'Memo',
					type: 'textInput',
					attributes: 'size="50"'
				}
			]
		}
	});
	function checkForNewRow() {
		if(form.data.detail[form.data.detail.length - 1].AccountId) {
			form.detail.find('tbody tr.noDeleteButton').removeClass('noDeleteButton');
			var newRow = _.clone(emptyRow);
			newRow.Amount = form.data.header.AmountToBalance;
			form.detail.addRow(newRow);
			return true;
		}
	}
	if(readonly)
		form.header.fields.AccountName.cell.find(':input').prop('disabled', true);
	checkForNewRow();
	form.detail.bind('changed.field', function(e, newValue, rowData, col, input) {
		dataEntered = true;
		if(col.name == 'Credit' || col.name == 'Debit') {
			form.data.header.AmountToBalance = round(form.data.header.AmountToBalance - (newValue - rowData.Amount));
			form.header.draw();
			var lastRow = form.data.detail[form.data.detail.length - 1];
			if(!lastRow.AccountId) {
				lastRow.Amount = form.data.header.AmountToBalance;
				form.detail.drawRow(form.data.detail.length - 1);
			}
		} else if(col.name == "AccountId" && newValue) {
			if(!rowData.AccountId) {
				form.detail.find('tbody tr.noDeleteButton').removeClass('noDeleteButton');
				form.data.header.AmountToBalance = round(form.data.header.AmountToBalance - rowData.Amount);
				form.header.draw();
			}
		} else if(col.name == 'Name') {
			emptyRow.Name = newValue;
			var name = _.find(names, function(v) { return v.value == newValue});
			rowData.NameAddressId = name ? name.id : 0;
		}

		setTimeout(checkForNewRow, 10);	// Wait for data to be updated after we return
	});
	if(record.header.idDocument) {
		actionButton('Audit').click(function () {
			goto('/reports/audithistory.html?id=' + record.header.idDocument + '&table=Transactions');
		});
	}
	actionButton('Print').click(function() {
		if(unsavedInput) {
			message('You must save the changes first');
			return;
		}
		window.print();
	});
});
	</script>
{{/with}}
</head>
<body>
	<table id="form"></table>
	<table id="docs"></table>
</body>
