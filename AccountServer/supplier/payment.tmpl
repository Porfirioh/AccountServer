<!DOCTYPE html>
<head>
{{#with Record}}
	<script>
$(function() {
	var record = '!{{Record}}';
	var suppliers = record.Names;
	var bankAccounts = record.BankAccounts;
	var supplierHash = hashFromArray(suppliers);
	var fixedAmount = matchingStatement();
	record.header.Remaining = record.header.DocumentOutstanding;
	record.header.Allocated = record.header.DocumentAmount - record.header.Remaining;
	var headerColumns = [
				{
					data: 'DocumentNameAddressId',
					heading: 'Name',
					type: 'selectInput',
					selectOptions: suppliers
				},
				'DocumentAddress',
				'Telephone',
				{
					data: 'DocumentAmount',
					type: 'decimalField',
					sameRow: true
				}
			];
	if(fixedAmount)
		headerColumns.push({
					data: 'Allocated',
					type: 'decimalField',
					sameRow: true
				},
				{
					data: 'Remaining',
					type: 'decimalField',
					sameRow: true
				});
	headerColumns.push({
			data: 'DocumentAccountId',
			type: 'selectInput',
			selectOptions: bankAccounts
		},
		{
			data: 'DocumentDate',
			type: 'dateInput'
		},
		{
			data: 'DocumentIdentifier',
			heading: 'Doc Id (e.g. cheque no)',
			type: 'docIdInput'
		},
		{
			data: 'DocumentMemo',
			type: 'textInput',
			maxlength: 255,
			size: 50
		}
	);
	var form = makeHeaderDetailForm('#form', '#docs', checkForStatementMatching({
		validate: function() {
			if(fixedAmount && form.data.header.Remaining < 0) {
				return 'You have allocated more than the payment - you must cancel some allocations before saving';
			}
		},
		data: record,
		saveAndNew: true,
		header: {
			table: 'Document',
			canDelete: record.header.DocumentAmount == 0,
			readonly: '!{{ReadOnly}}',
			columns: headerColumns
		},
		detail: {
			table: 'Document',
			columns: [
				'/DocumentDate',
				'DocType',
				'DocumentIdentifier/Invoice No',
				'DocumentMemo',
				'#Amount/Orig Amount',
				'#Outstanding',
				{
					data: 'Paid',
					type: 'checkboxInput'
				},
				{
					data: 'AmountPaid',
					type: 'decimalInput'
				}
			]
		}
	}));
	function checkAmount() {
		form.data.header.Remaining = form.data.header.DocumentAmount - form.data.header.Allocated;
		message(form.data.header.Remaining < 0 ? "You have allocated more than the payment" : "");
		form.header.draw();
		form.header.find('#r0cDocumentNameAddressId').prop('disabled', record.header.Allocated != 0);
	}
	function updateAmount(rowData, newValue) {
		var original = rowData.AmountPaid || 0;
		if(!fixedAmount)
			form.data.header.DocumentAmount += newValue - original;
		form.data.header.Allocated += newValue - original;
		checkAmount();
	}
	form.header.find('#r0cDocumentNameAddressId').prop('disabled', record.header.Allocated != 0);
	form.header.bind('changed.field', function(e, newValue, rowData, col, input) {
		if(col.name == 'DocumentNameAddressId') {
			var supplier = supplierHash[newValue];
			if(supplier) {
				rowData.DocumentNameAddressId = newValue;
				rowData.DocumentAddress = supplier.Address;
				rowData.Telephone = supplier.Telephone;
				form.header.draw();
				get('/Supplier/PaymentListing?id=' + record.header.idDocument + '&name=' + newValue, null, function(data) {
					record.detail = data;
					form.detail.dataReady(data);
				});
			}
		}
	});
	form.detail.bind('changed.field', function(e, newValue, rowData, col, input) {
		switch(col.name) {
			case 'Paid':
				var amount = newValue ? rowData.Outstanding : 0;
				if(fixedAmount)
					amount = newValue ? Math.min(Math.max(form.data.header.Remaining, 0), amount) : 0;
				updateAmount(rowData, amount);
				if(newValue && amount != rowData.Outstanding)
					message('Item outstanding exceeds remaining amount - reduced to ' + amount);
				rowData.Paid = newValue;
				rowData.AmountPaid = amount;
				form.detail.drawRow(input);
				break;
			case 'AmountPaid':
				updateAmount(rowData, newValue);
				break;
		}
	});
	if(matchingStatement()) {
		form.header.find('#r0cDocumentAccountId').prop('disabled', true);
	} else {
		if (record.header.idDocument) {
			if (record.header.DocumentAmount != record.header.DocumentOutstanding)
				actionButton('Payment history').click(function () {
					goto('/supplier/paymenthistory.html?id=' + record.header.idDocument);
				});
			actionButton('Audit').click(function () {
				goto('/reports/audithistory.html?id=' + record.header.idDocument + '&table=Transactions');
			});
		}
		actionButton('Print').click(function () {
			if (unsavedInput) {
				message('You must save the changes first');
				return;
			}
			window.print();
		});
	}
});
	</script>
{{/with}}
</head>
<body>
	<table id="form"></table>
	<table id="docs" cellspacing="0" width="100%"></table>
</body>
